#include <iostream>

using namespace std;

#define REP(i, n) for(int i=0; i<n; i++)

bool prime[1100000];
int maze[1100][1100];
int mazen[1100][1100];
int dp[1100][1100];
int n, m;
int num;
int hen;
bool flag;
int jx, iy;
int si, sj;

void makemaze(int x1, int y1){
    REP(i, hen) {
        num++;
        if (num > n) {
            flag = false; break;
        }

        iy += y1; jx += x1;
        if (num == m) si = iy; sj = jx;

        mazen[iy][jx] = num;
        if (prime[num]) {
            maze[iy][jx] = 0;
        } else {
            maze[iy][jx] = 1; // prime
        }
    }
}

int main() {
    REP(i, 1100000) prime[i] = true;
    prime[0] = false; prime[1] = false;
    for(int i=2; i<1100000; i++) {
        if (prime[i]) {
            for(int j=2; j<1100000/i; j++) {
                prime[i*j] = false;
            }
        }
    }

    while(true) {
        cin >> n >> m;
        if (n==0) break;

        int sq;
        REP(i, 1100) {
            if (i*i >= n) {
                sq = i; break;
            }
        }

        // initial index
        jx = (sq+1)/2;
        iy = jx;

        REP(k, sq+3) {
            REP(l, sq+3) {
                maze[k][l] = 2; dp[k][l] = -1; mazen[k][l] = -1;
            }
        }

        maze[iy][jx] = 0;
        mazen[iy][jx] = 1;

        hen = 1;
        num = 1;
        flag = true;
        int x1, y1, x2, y2;
        while(flag) {
            if (hen % 2 == 1) {
                x1=1; y1=0; x2=0; y1=-1;
            } else {
                x1=0; y1=1; x2=1; y2=0;
            }
            
            makemaze(x1, y1);
            makemaze(x2, y2);
        }

        cout << si << sj << endl;

        int largesti = 0;
        dp[si][sj] = 0;
        if (maze[si][sj]==1) dp[si][sj]++;
        for(int i=si; i<sq; i++) {
            REP(j, sq) {
                if (dp[i][j]<0 || maze[i][j]==2) continue;
                largesti = i;
                REP(k, 3) {
                    int mv = k-1;
                    if (j+mv < 0 || maze[i+1][j+mv]==2) continue;
                    dp[i+1][j+mv] += dp[i][j];
                }
            }

            REP(j, sq) {
                if (dp[i+1][j] >= 0 && maze[i][j] == 1) dp[i+1][j]++;
            }
        }

        int output = 0;
        int last;
        REP(j, sq) {
            int fi;
            if (maze[largesti][j] == 2) {
                fi = largesti-1;
            } else {
                fi = largesti;
            }

            if (dp[fi][j] > output) {
                last = mazen[fi][j];
                output = dp[fi][j];
            }
            if (dp[fi][j] == output) {
                last = max(mazen[largesti][j], last);
            }
        }

        if (output == 0) {
            cout << "0 0" << endl;
        } else {
            cout << output << " " << last << endl;
        }
    }
}

